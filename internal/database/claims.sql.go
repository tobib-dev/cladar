// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: claims.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createClaim = `-- name: CreateClaim :one
INSERT INTO claims (id, customer_id, agent_id, claim_type, created_at, updated_at, current_status, award)
VALUES (gen_random_uuid(), $1, $2, $3, NOW(), NOW(), 'pending', $4)
RETURNING id, customer_id, agent_id, claim_type, created_at, updated_at, current_status, award
`

type CreateClaimParams struct {
	CustomerID uuid.UUID
	AgentID    uuid.UUID
	ClaimType  string
	Award      sql.NullFloat64
}

func (q *Queries) CreateClaim(ctx context.Context, arg CreateClaimParams) (Claim, error) {
	row := q.db.QueryRowContext(ctx, createClaim,
		arg.CustomerID,
		arg.AgentID,
		arg.ClaimType,
		arg.Award,
	)
	var i Claim
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.AgentID,
		&i.ClaimType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CurrentStatus,
		&i.Award,
	)
	return i, err
}

const getAllClaims = `-- name: GetAllClaims :many
SELECT id, customer_id, agent_id, claim_type, created_at, updated_at, current_status, award FROM claims
`

func (q *Queries) GetAllClaims(ctx context.Context) ([]Claim, error) {
	rows, err := q.db.QueryContext(ctx, getAllClaims)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Claim
	for rows.Next() {
		var i Claim
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.AgentID,
			&i.ClaimType,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CurrentStatus,
			&i.Award,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClaimByID = `-- name: GetClaimByID :one
SELECT id, customer_id, agent_id, claim_type, created_at, updated_at, current_status, award FROM claims
WHERE id = $1
`

func (q *Queries) GetClaimByID(ctx context.Context, id uuid.UUID) (Claim, error) {
	row := q.db.QueryRowContext(ctx, getClaimByID, id)
	var i Claim
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.AgentID,
		&i.ClaimType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CurrentStatus,
		&i.Award,
	)
	return i, err
}
