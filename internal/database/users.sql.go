// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, email, pswd, user_role, role_id, created_at, updated_at)
VALUES (gen_random_uuid(), $1, $2, $3, $4, NOW(), NOW())
RETURNING id, email, pswd, user_role, role_id, created_at, updated_at
`

type CreateUserParams struct {
	Email    string
	Pswd     string
	UserRole UserType
	RoleID   uuid.UUID
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.Pswd,
		arg.UserRole,
		arg.RoleID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Pswd,
		&i.UserRole,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserByRoleId = `-- name: DeleteUserByRoleId :exec
DELETE FROM users
WHERE role_id = $1
`

func (q *Queries) DeleteUserByRoleId(ctx context.Context, roleID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserByRoleId, roleID)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, pswd, user_role, role_id, created_at, updated_at FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Pswd,
		&i.UserRole,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, pswd, user_role, role_id, created_at, updated_at FROM users
WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Pswd,
		&i.UserRole,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
