// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: agents.sql

package database

import (
	"context"
)

const createAgent = `-- name: CreateAgent :one
INSERT INTO agents (id, first_name, last_name, created_at, updated_at, email, dept)
VALUES (gen_random_uuid(), $1, $2, NOW(), NOW(), $3, $4)
RETURNING id, first_name, last_name, created_at, updated_at, email, dept
`

type CreateAgentParams struct {
	FirstName string
	LastName  string
	Email     string
	Dept      string
}

func (q *Queries) CreateAgent(ctx context.Context, arg CreateAgentParams) (Agent, error) {
	row := q.db.QueryRowContext(ctx, createAgent,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Dept,
	)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Dept,
	)
	return i, err
}

const getAllAgents = `-- name: GetAllAgents :many
SELECT id, first_name, last_name, created_at, updated_at, email, dept FROM agents
`

func (q *Queries) GetAllAgents(ctx context.Context) ([]Agent, error) {
	rows, err := q.db.QueryContext(ctx, getAllAgents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Agent
	for rows.Next() {
		var i Agent
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.Dept,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
